#version 150 compatibility
#extension GL_ARB_geometry_shader4 : enable

#define WINDOWS 0

#if WINDOWS
layout (triangles) in;
layout (triangle_strip) out;
#endif

layout (max_vertices = 72) out;

const float pi = 3.14159265359;

////////////////
uniform vec4 ambientColor;
uniform vec4 diffuseColor;
uniform vec4 specularColor;
uniform float specularExponent;

uniform int level;
uniform float time;

in vertexData
{
	vec3 pos;
	vec3 normal;
	vec4 color;
}vertices[];

out fragmentData
{
	vec3 vpos;
	vec3 normal;
	vec4 color;
}frag;   


///////////////////////////////
// exercise 3 random helper function for bonus 3.1
float rnd(vec2 x)
{
	int n = int(x.x * 40.0 + x.y * 6400.0);
	n = (n << 13) ^ n;
	return 1.0 - float( (n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0;
}

///////////////////////////////
void main()
{
	///////////////////////////////
	// TODO replace the geometry pass-through 
	// shader in the following with exercise 3
	// you can also add a function to produce new vertices
	
	float factor = float(pow(2,level));
	vec4 v1, v2, v3;
	
	int i = 0;
	frag.vpos = vertices[i].pos;
	frag.normal = vertices[i].normal;
	frag.color = vertices[i].color;
	
	for(i; i < gl_in.length(); i++)
	
	{ 
	
	    if (level == 0) {
	    
	      gl_Position = (gl_in[i].gl_Position)*(1) + (gl_in[i+1].gl_Position)*(0) + (gl_in[i+2].gl_Position)*(0);
	      EmitVertex(); 
	      gl_Position = (gl_in[i].gl_Position)*(0) + (gl_in[i+1].gl_Position)*(1) + (gl_in[i+2].gl_Position)*(0);
	      EmitVertex(); 
	      gl_Position = (gl_in[i].gl_Position)*(0) + (gl_in[i+1].gl_Position)*(0) + (gl_in[i+2].gl_Position)*(1);
	      EmitVertex(); 	      
	      
	    } else if (level >= 1) {   
	    
	      if (i < (gl_in.length()-1)) {
		
		gl_Position = (gl_in[i].gl_Position)*(1.0) + (gl_in[i+1].gl_Position)*(0.0) + (gl_in[i+2].gl_Position)*(0.0);
		EmitVertex(); 	      
		gl_Position = (gl_in[i].gl_Position)/factor + (gl_in[i+1].gl_Position)/factor + (gl_in[i+2].gl_Position)*(0.0);
		EmitVertex(); 	 
		gl_Position = (gl_in[i].gl_Position)/factor + (gl_in[i+1].gl_Position)*(0.0) + (gl_in[i+2].gl_Position)/factor;
		EmitVertex();
		
	      /*gl_Position = (gl_in[i].gl_Position)*(1/factor) + (gl_in[i+1].gl_Position)*(1/factor) + (gl_in[i+2].gl_Position)*(0);
	      EmitVertex(); 
	      gl_Position = (gl_in[i].gl_Position)*(0) + (gl_in[i+1].gl_Position)*(1) + (gl_in[i+2].gl_Position)*(1/factor);
	      EmitVertex(); 
	      gl_Position = (gl_in[i].gl_Position)*(1/factor) + (gl_in[i+1].gl_Position)*(1/factor) + (gl_in[i+2].gl_Position)*(1/factor);
	      EmitVertex(); */	 
		
	      } else {	
		
		gl_Position = (gl_in[i].gl_Position)*(1.0) + (gl_in[i+1].gl_Position)*(0.0) + (gl_in[i+2].gl_Position)*(0.0);
		EmitVertex();
		gl_Position = (gl_in[i].gl_Position)/factor + (gl_in[i-1].gl_Position)/factor + (gl_in[i+2].gl_Position)*(0.0);
		EmitVertex(); 
		gl_Position = (gl_in[i].gl_Position)/factor + (gl_in[i-2].gl_Position)/factor + (gl_in[i+2].gl_Position)*(0.0);
		EmitVertex();
		/*gl_Position = (gl_in[i-2].gl_Position)*(1/factor) + (gl_in[i-1].gl_Position)*(1/factor) + (gl_in[i].gl_Position)*(0);
		EmitVertex(); 
		gl_Position = (gl_in[i-2].gl_Position)*(0) + (gl_in[i-1].gl_Position)*(1) + (gl_in[i].gl_Position)*(1/factor);
		EmitVertex(); 
		gl_Position = (gl_in[i-2].gl_Position)*(1/factor) + (gl_in[i-1].gl_Position)*(1/factor) + (gl_in[i].gl_Position)*(1/factor);
		EmitVertex(); 	*/
		
	      }
	    
	      EndPrimitive(); 
	    
	    } 
	    
	    if (level >=2) {
	    
	    
	    if (i < (gl_in.length()-2)) {
		
		/*gl_Position = (3*gl_in[i].gl_Position)/factor + (gl_in[i+1].gl_Position)/factor + (gl_in[i+2].gl_Position)*(0);
		EmitVertex(); 	      
		gl_Position = (gl_in[i].gl_Position)/2 + (gl_in[i+1].gl_Position)/2 + (gl_in[i+2].gl_Position)/4;
		EmitVertex(); 	 
		gl_Position = (3*gl_in[i].gl_Position)/4 + (gl_in[i+1].gl_Position)/4 + (gl_in[i+2].gl_Position)/4;
		EmitVertex();	*/			
		
		/*EndPrimitive(); 
		
		gl_Position = (gl_in[i].gl_Position)/2 + (gl_in[i+1].gl_Position)/2 + (gl_in[i+2].gl_Position)*(0);
		EmitVertex(); 	      
		gl_Position = (gl_in[i].gl_Position)/4 + (3*gl_in[i+1].gl_Position)/4 + (gl_in[i+2].gl_Position)/4;
		EmitVertex(); 	 
		gl_Position = (gl_in[i].gl_Position)/2 + (gl_in[i+1].gl_Position)/2 + (gl_in[i+2].gl_Position)/4;
		EmitVertex();   		
		
		EndPrimitive(); 
		
		gl_Position = (gl_in[i].gl_Position)/2 + (gl_in[i+1].gl_Position)/2 + (gl_in[i+2].gl_Position)/4;
		EmitVertex(); 	      
		gl_Position = (gl_in[i].gl_Position)/4 + (3*gl_in[i+1].gl_Position)/4 + (gl_in[i+2].gl_Position)/2;
		EmitVertex(); 	 
		gl_Position = (gl_in[i].gl_Position)/4 + (3*gl_in[i+1].gl_Position)/4 + (gl_in[i+2].gl_Position)/2;
		EmitVertex();   		
		
		EndPrimitive(); 
		
		gl_Position = (gl_in[i].gl_Position)/4 + (3*gl_in[i+1].gl_Position)/4 + (gl_in[i+2].gl_Position)*(0);
		EmitVertex(); 	      
		gl_Position = (gl_in[i].gl_Position)*(0) + (gl_in[i+1].gl_Position)*(1) + (gl_in[i+2].gl_Position)/4;
		EmitVertex(); 	 
		gl_Position = (gl_in[i].gl_Position)/4 + (3*gl_in[i+1].gl_Position)/4 + (gl_in[i+2].gl_Position)/4;
		EmitVertex();   		
		
		EndPrimitive(); 
		
		gl_Position = (gl_in[i].gl_Position)/4 + (3*gl_in[i+1].gl_Position)/4 + (gl_in[i+2].gl_Position)/4;
		EmitVertex(); 	      
		gl_Position = (gl_in[i].gl_Position)*(0) + (gl_in[i+1].gl_Position)*(1) + (gl_in[i+2].gl_Position)/2;
		EmitVertex(); 	 
		gl_Position = (gl_in[i].gl_Position)/4 + (3*gl_in[i+1].gl_Position)/4 + (gl_in[i+2].gl_Position)/2;
		EmitVertex();   		
		
		EndPrimitive(); 
		
		gl_Position = (gl_in[i].gl_Position)/4 + (3*gl_in[i+1].gl_Position)/4 + (gl_in[i+2].gl_Position)/2;
		EmitVertex(); 	      
		gl_Position = (gl_in[i].gl_Position)*(0) + (gl_in[i+1].gl_Position)*(1) + (3*gl_in[i+2].gl_Position)/4;
		EmitVertex(); 	 
		gl_Position = (gl_in[i].gl_Position)/4 + (3*gl_in[i+1].gl_Position)/4 + (3*gl_in[i+2].gl_Position)/4;
		EmitVertex();*/  
		
		 
		/*gl_Position = (gl_in[i].gl_Position)*(0.75) + (gl_in[i+1].gl_Position)*(0.25) + (gl_in[i+2].gl_Position)*(0.0);
		EmitVertex(); 			 
		gl_Position = (gl_in[i].gl_Position)*(0.75) + (gl_in[i+1].gl_Position)*(0.25) + (gl_in[i+2].gl_Position)*(0.25);
		EmitVertex();	
		gl_Position = (gl_in[i].gl_Position)*(1.0) + (3*gl_in[i+1].gl_Position)*(0.0) + (gl_in[i+2].gl_Position)*(0.0);
		EmitVertex();*/   
		
		
	      } else {	   
		
		/*gl_Position = (gl_in[i].gl_Position)*(1) + (gl_in[i+1].gl_Position)*(0) + (gl_in[i+2].gl_Position)*(0);
		EmitVertex();
		gl_Position = (gl_in[i].gl_Position)/factor + (gl_in[i-1].gl_Position)/factor + (gl_in[i+2].gl_Position)*(0);
		EmitVertex(); 
		gl_Position = (gl_in[i].gl_Position)/factor + (gl_in[i-2].gl_Position)/factor + (gl_in[i+2].gl_Position)*(0);
		EmitVertex();*/ 	
	      }
	    EndPrimitive(); 	    
	    }
	 } 
	
	  if (level == 0)
	    EndPrimitive(); 
		    
	  
}